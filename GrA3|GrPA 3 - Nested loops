task = input()

if task == "permutation": #Given a string s, print all the possible two-letter permutations(without repitition) of the letters in the string.
  s = input()
  for c in s:
    for d in s:
      if c!=d:
        print(c+d)

elif task == "sorted_permutation": #Given a string s, print all the possible two-letter permutations(without repetition) of the letters in the string where the first character comes before the second one in alphabetical order. The order in which the permutations are printed is same as the previous one 
  s = input()
  alphabet = "abcdefghijklmnopqrstuvwxyz"
  for c in s:
    for d in s:
      if alphabet.index(c) < alphabet.index(d):
        print(c+d)
      else:
        continue

elif task == "repeat_the_repeat": #Given a number n, print the numbers from 1 to n in the same line and repeat this n times.
  n = int(input())
  count = 0
  while count < n: 
    for i in range(1, n+1):
      print (i, end = "")
    print ()
    count = count + 1

elif task == "repeat_incrementally":
 '''Given a number n, print a pattern where the k-th line contains the first k numbers and there are n lines in total. 
 For example, if n is 4, the output should be: 1 12 123 1234 
 '''
 n = int(input())
 for i in range(1, n+1):
  k = 0
  while k < i:
    print (k+1, end = "")
    k = k + 1
  print ()
  
elif task == "increment_and_decrement":
  n = int(input())
  for i in range(1, n+1):
    for k in range(1, i+1):
        print (k, end = "")
    for k in range(i-1, 0, -1):
        print (k, end = "")
    print ()
